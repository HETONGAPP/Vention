// Generated by gencpp from file serv_msgs/he.msg
// DO NOT EDIT!


#ifndef SERV_MSGS_MESSAGE_HE_H
#define SERV_MSGS_MESSAGE_HE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serv_msgs
{
template <class ContainerAllocator>
struct he_
{
  typedef he_<ContainerAllocator> Type;

  he_()
    : tri(0)  {
    }
  he_(const ContainerAllocator& _alloc)
    : tri(0)  {
  (void)_alloc;
    }



   typedef int32_t _tri_type;
  _tri_type tri;





  typedef boost::shared_ptr< ::serv_msgs::he_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serv_msgs::he_<ContainerAllocator> const> ConstPtr;

}; // struct he_

typedef ::serv_msgs::he_<std::allocator<void> > he;

typedef boost::shared_ptr< ::serv_msgs::he > hePtr;
typedef boost::shared_ptr< ::serv_msgs::he const> heConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serv_msgs::he_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serv_msgs::he_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serv_msgs::he_<ContainerAllocator1> & lhs, const ::serv_msgs::he_<ContainerAllocator2> & rhs)
{
  return lhs.tri == rhs.tri;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serv_msgs::he_<ContainerAllocator1> & lhs, const ::serv_msgs::he_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::serv_msgs::he_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serv_msgs::he_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serv_msgs::he_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serv_msgs::he_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serv_msgs::he_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serv_msgs::he_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serv_msgs::he_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5ed9d42871f5481e2c87506ca573e1e2";
  }

  static const char* value(const ::serv_msgs::he_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5ed9d42871f5481eULL;
  static const uint64_t static_value2 = 0x2c87506ca573e1e2ULL;
};

template<class ContainerAllocator>
struct DataType< ::serv_msgs::he_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serv_msgs/he";
  }

  static const char* value(const ::serv_msgs::he_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serv_msgs::he_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 tri\n"
"\n"
;
  }

  static const char* value(const ::serv_msgs::he_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serv_msgs::he_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tri);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct he_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serv_msgs::he_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serv_msgs::he_<ContainerAllocator>& v)
  {
    s << indent << "tri: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tri);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERV_MSGS_MESSAGE_HE_H
